from flask import Flask, request, jsonify
import sqlite3
app = Flask(__name__)
# Create a connection to the SQLite database
conn = sqlite3.connect('restaurant.db')
cursor = conn.cursor()
# Create orders table if it doesn't exist
cursor.execute('''CREATE TABLE IF NOT EXISTS orders
                  (id INTEGER PRIMARY KEY AUTOINCREMENT,
                   item TEXT NOT NULL,
                   quantity INTEGER NOT NULL,
                   order_type TEXT NOT NULL)''')
conn.commit()
@app.route('/orders', methods=['GET', 'POST'])
def manage_orders():
if request.method == 'GET':
        cursor.execute('SELECT * FROM orders')
        orders = cursor.fetchall()
        return jsonify([{'id': row[0], 'item': row[1], 'quantity':
row[2], 'order_type': row[3]} for row in orders])
    elif request.method == 'POST':
        order_data = request.json
        item = order_data.get('item')
        quantity = order_data.get('quantity')
        order_type = order_data.get('order_type')
        if not item or not quantity or not order_type:
            return jsonify({'error': 'Incomplete order data'}), 400
        cursor.execute('INSERT INTO orders (item, quantity,
order_type) VALUES (?, ?, ?)', (item, quantity, order_type))
        conn.commit()
        return jsonify({'message': 'Order placed successfully'}), 201
@app.route('/orders/<int:order_id>', methods=['GET', 'PUT', 'DELETE'])
def manage_order(order_id):
    if request.method == 'GET':
        cursor.execute('SELECT * FROM orders WHERE id = ?',
(order_id,))
        order = cursor.fetchone()
if order:
return jsonify({'id': order[0], 'item': order[1],
'quantity': order[2], 'order_type': order[3]})
        else:
            return jsonify({'error': 'Order not found'}), 404
    elif request.method == 'PUT':
        order_data = request.json
        item = order_data.get('item')
        quantity = order_data.get('quantity')
        order_type = order_data.get('order_type')
        if not item or not quantity or not order_type:
            return jsonify({'error': 'Incomplete order data'}), 400
        cursor.execute('UPDATE orders SET item=?, quantity=?,
order_type=? WHERE id=?', (item, quantity, order_type, order_id))
        conn.commit()
        return jsonify({'message': 'Order updated successfully'})
    elif request.method == 'DELETE':
        cursor.execute('DELETE FROM orders WHERE id = ?',
(order_id,))
        conn.commit()
        return jsonify({'message': 'Order deleted successfully'})
if __name__ == '__main__':
    app.run(debug=True)
